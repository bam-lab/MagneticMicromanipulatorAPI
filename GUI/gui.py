#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Nov 05, 2018 02:38:38 AM EST  platform: Linux

import os,sys
current_directory = os.getcwd()
parent_directory = os.path.dirname(current_directory)
sys.path.insert(0, parent_directory)

from api.demagnetizer import Demagnetizer

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import gui_support
import serial.tools.list_ports

from api.manipulator import *
from api.power_supply import *
from threading import *

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    gui_support.set_Tk_var()
    top = GUI (root)
    gui_support.init(root, top)
    root.mainloop()

w = None
def create_GUI(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    gui_support.set_Tk_var()
    top = GUI (w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_GUI():
    global w
    w.destroy()
    w = None


class GUI:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family Verdana -size 14 -weight normal -slant roman" \
                 " -underline 0 -overstrike 0"
        font11 = "-family Verdana -size 14 -weight bold -slant roman " \
                 "-underline 0 -overstrike 0"
        font9 = "-family Verdana -size 12 -weight normal -slant roman " \
                "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("758x629+110+66")
        top.title("GUI")
        top.configure(highlightcolor="black")

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        #INSTANCE INITIALIZATION FOR MANIPULATOR, POWER SUPPLY, AND DEMAG
        ports = list(serial.tools.list_ports.comports())

        relay_1 = Relay(5)
        relay_2 = Relay(6)

        mm = None
        supply = PowerSupply("/dev/ttyUSB0", relay_1, relay_2)
        for p in ports:
            if "/dev/ttyUSB1" in p:
                mm = Manipulator("/dev/ttyUSB1")

        demagnetizer = Demagnetizer(supply, relay_1, relay_2)
        

        #TODO
        '''
        -MANUAL COM PORT SELECTION, VARIABLE COM PORTS, AUTO DETECT COM PORTS?
        -STOP/INTERRUPT BUTTONS
        -MAKE PATHING FUNCTION
        '''

        def demagnetization():
            try:
                zero_field
            except NameError:
                self.console_output.insert(1.0, "Calibration required\n")
            else:
                self.console_output.insert(1.0, "Demagnetization in progress...\n")
                time.sleep(3)
                demagnetizer.demag_current(zero_field)
                r_field = demagnetizer.get_field()
                self.console_output.insert(1.0, "Demagnetization complete. Residual field is "+str(r_field)+"\n")

        def calibrate_demag():
            self.console_output.insert(1.0, "Calibration in progress...\n")
            time.sleep(3)
            global zero_field
            zero_field = demagnetizer.calibrate()
            self.console_output.insert(1.0, "Calibration complete. Zero field is "+str(zero_field)+"\n")

        def status_refresh():
            if mm != None:
                mm.set_mode(Mode.ABSOLUTE)
                x, y, z = mm.get_current_position()
                gui_support.status_abspos_v.set(str(x) + " x,  " + str(y) + " y,  " + str(z) + " z")
                mm_status_dict = mm.get_status()
                vel = mm_status_dict['XSPEED']
                gui_support.velocity.set(str(vel))
                gui_support.status_vel_v.set(str(vel))
                res = mm_status_dict['XSPEED_RES']
                gui_support.status_res_v.set(str(res))
                mm.refresh_display()

            c=round(supply.get_current(),4)
            gui_support.status_current_v.set(str(c))
            gui_support.status_magfield_v.set(str(demagnetizer.get_field()))
            self.console_output.insert(1.0, "Status page refreshed\n")

        def is_okay(string):
            match = re.search('[^0-9.-]', str(string))
            if match:
                return True
            else:
                if not string:
                    return True
                elif string.count('-') > 1 or string.count('.') > 1:
                    return True
                elif string.find('-') != -1 and not(string.startswith('-')):
                    return True
                elif string.startswith('.'):
                    return True
                elif string.startswith('-') and len(string) == 1:
                    return True
                else:
                    return False

        def gtp():
            x = gui_support.gtp_x.get()
            y = gui_support.gtp_y.get()
            z = gui_support.gtp_z.get()

            if (is_okay(x) or is_okay(y) or is_okay(z)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            else:
                self.console_output.insert(1.0, "Moving to "+x+"x "+y+"y "+z+"z...\n")
                mm.set_mode(Mode.ABSOLUTE)
                mm.go_to_position(float(x),float(y),float(z))
                self.console_output.insert(1.0, "Moving complete\n")
                status_refresh()

        def origin():
            mm.set_origin()
            self.console_output.insert(1.0, "Origin set\n")

        def step_x():
            xmove = gui_support.step_x.get()
            if (is_okay(xmove)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            else:
                self.console_output.insert(1.0, "Moving by "+str(xmove)+"x\n")
                mm.set_mode(Mode.ABSOLUTE)
                x, y, z = mm.get_current_position()
                mm.go_to_position(float(xmove)+x,y,z)
                self.console_output.insert(1.0, "Moving complete\n")
                status_refresh()

        def step_y():
            ymove = gui_support.step_y.get()
            if is_okay(ymove):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            else:
                self.console_output.insert(1.0, "Moving by "+str(ymove)+"y\n")
                mm.set_mode(Mode.ABSOLUTE)
                x, y, z = mm.get_current_position()
                mm.go_to_position(x, float(ymove) + y, z)
                self.console_output.insert(1.0, "Move complete\n")
                status_refresh()

        def step_z():
            zmove = gui_support.step_z.get()
            if (is_okay(zmove)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            else:
                self.console_output.insert(1.0, "Moving by "+str(zmove)+"z\n")
                mm.set_mode(Mode.ABSOLUTE)
                x, y, z = mm.get_current_position()
                mm.go_to_position(x, y, float(zmove)+z)
                self.console_output.insert(1.0, "Move complete\n")
                status_refresh()

        def change_velocity():
            vel = gui_support.velocity.get()
            if is_okay(vel):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            elif float(vel) <= 0:
                self.console_output.insert(1.0, "Velocity must be positive and less than 1000...\n")
            else:
                if gui_support.radio_resolution.get() == "low":
                    mm.set_velocity(float(vel), Resolution.LOW)
                else:
                    mm.set_velocity(float(vel), Resolution.HIGH)
                    
                self.console_output.insert(1.0, "Changed velocity to " + str(vel) + "um/s\n")
                status_refresh()

        def change_resolution():
            res = gui_support.radio_resolution.get()
            mm_status_dict = mm.get_status()
            vel = mm_status_dict['XSPEED']
            if gui_support.radio_resolution.get() == "low":
                mm.set_velocity(float(vel), Resolution.LOW)
            else:
                mm.set_velocity(float(vel), Resolution.HIGH)

            status_refresh()

        def master_stop():
            supply_interupt()
            mm_interupt()
            gui_support.status_duration_v.set("0")
            self.console_output.insert(1.0, "All processes stopped\n")

        def mm_interupt():
            mm.interrupt()
            self.console_output.insert(1.0, "Micromanipulator interrupted\n")

        def supply_interupt():
            supply.disable_output()
            supply.stop_wave()
            gui_support.status_duration_v.set("0")
            self.console_output.insert(1.0, "Power supply interrupted\n")

        def stop():
            supply.disable_output()
            gui_support.status_duration_v.set("0")
            #need to stop square/sin/ramp individually?
            self.console_output.insert(1.0, "Power supply output disabled\n")

        def pathing():
            #three entries, one for each axis
            #two more entries for upper and lower bounds of time parameter
            '''last'''

        def constant_run():
            duration = gui_support.constant_duration.get()
            current = gui_support.constant_amps.get()
            if (is_okay(duration) or is_okay(current)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            elif float(duration) <= 0:
                self.console_output.insert(1.0, "Duration must be greater than 0...\n")
            elif float(current) > 3:
                self.console_output.insert(1.0, "Current must be less than 3...\n")
            else:
                supply.set_current(float(current))
                supply.enable_output()
                gui_support.status_wave_v.set("Constant")
                gui_support.status_duration_v.set(str(duration))
                duration_thread = Thread(target=duration_timer)
                duration_thread.start()
                self.console_output.insert(1.0, "Running constant wave for "+str(duration)+"s...\n")
                ##

        def square_run():
            current = gui_support.square_amp.get()
            freq = gui_support.square_freq.get()
            duty = gui_support.square_duty.get()
            duration = gui_support.square_duration.get()
            if (is_okay(duration) or is_okay(current) or is_okay(freq) or is_okay(duty)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            elif float(duration) <= 0:
                self.console_output.insert(1.0, "Duration must be greater than 0...\n")
            elif float(current) > 3:
                self.console_output.insert(1.0, "Current must be less than or equal to 3...\n")
            else:
                supply.start_square_wave(float(current),1/float(freq),float(duty)/100)
                gui_support.status_wave_v.set("Square")
                gui_support.status_duration_v.set(str(duration))
                duration_thread = Thread(target=duration_timer)
                duration_thread.start()
                self.console_output.insert(1.0, "Running square wave for "+str(duration)+"s...\n")
                #

        def sinusoidal_run():
            amplitude = gui_support.sin_amplitude.get()
            offset = gui_support.sin_offset.get()
            freq = gui_support.sin_freq.get()
            duration = gui_support.sin_duration.get()
            if (is_okay(duration) or is_okay(amplitude) or is_okay(freq) or is_okay(offset)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            elif float(duration) <= 0:
                self.console_output.insert(1.0, "Duration must be greater than 0...\n")
            elif float(amplitude)+float(offset) > 3:
                self.console_output.insert(1.0, "Amplitude + offset must be less than or equal to 3...\n")
            else:
                supply.start_sine_wave(float(amplitude), 1/float(freq), None, float(offset))
                gui_support.status_wave_v.set("Sinusoidal")
                gui_support.status_duration_v.set(str(duration))
                duration_thread = Thread(target=duration_timer)
                duration_thread.start()
                self.console_output.insert(1.0, "Running sinusoidal wave for "+str(duration)+"s...\n")


        def ramping_run():
            amplitude = gui_support.ramping_amp.get()
            rise = gui_support.ramping_rise.get()
            steady = gui_support.ramping_steady.get()
            rest = gui_support.ramping_rest.get()
            duration = gui_support.ramping_duration.get()
            if (is_okay(duration) or is_okay(amplitude) or is_okay(rise) or is_okay(steady) or is_okay(rest)):
                self.console_output.insert(1.0, "Only numbers, '-', and '.' are allowed. Please check format...\n")
            elif float(duration) <= 0:
                self.console_output.insert(1.0, "Duration must be greater than 0...\n")
            elif float(amplitude)+float(offset) > 3:
                self.console_output.insert(1.0, "Amplitude + offset must be less than or equal to 3...\n")
            else:
                supply.start_ramp_wave(float(amplitude), float(rise), float(steady), float(rest))
                gui_support.status_wave_v.set("Ramping")
                gui_support.status_duration_v.set(str(duration))
                duration_thread = Thread(target=duration_timer)
                duration_thread.start()
                self.console_output.insert(1.0, "Running ramping wave for "+str(duration)+"s...\n")

        def duration_timer():
            duration = float(gui_support.status_duration_v.get())
            while duration > 0:
                if(float(gui_support.status_duration_v.get()) <= 0):
                    supply.disable_output()
                    supply.stop_wave()
                    break
                self.console_output.insert(1.0, "Remaining duration: " + str(duration)+"\n")
                time.sleep(1)
                duration = duration-1

            supply.stop_wave()
            supply.disable_output()

        def clear_console():
            self.console_output.delete(1.0, END)

        def write_log():
            current_directory = os.getcwd() + "/log.txt"
            msg = self.console_output.get(1.0, END)
            f = open(current_directory, 'a+')
            f.write("==========================NEW LOG==========================\n" + msg)
            f.close()

        self.MM_Frame = Frame(top)
        self.MM_Frame.place(relx=0.0, rely=0.0, relheight=0.469, relwidth=0.534)
        self.MM_Frame.configure(relief=RAISED)
        self.MM_Frame.configure(borderwidth="2")
        self.MM_Frame.configure(relief=RAISED)
        self.MM_Frame.configure(width=405)

        self.Entry_gtp_x = Entry(self.MM_Frame)
        self.Entry_gtp_x.place(relx=0.049, rely=0.136, height=20, relwidth=0.129)

        self.Entry_gtp_x.configure(background="white")
        self.Entry_gtp_x.configure(font="TkFixedFont")
        self.Entry_gtp_x.configure(selectbackground="#c4c4c4")
        self.Entry_gtp_x.configure(textvariable=gui_support.gtp_x)

        self.Label_Manipulator = Label(self.MM_Frame, anchor='w')
        self.Label_Manipulator.place(relx=0.049, rely=0.034, height=28
                                     , width=150)
        self.Label_Manipulator.configure(activebackground="#f9f9f9")
        self.Label_Manipulator.configure(font=font9)
        self.Label_Manipulator.configure(text='''Micromanipulator''')

        self.Entry_gtp_y = Entry(self.MM_Frame)
        self.Entry_gtp_y.place(relx=0.181, rely=0.136, height=20, relwidth=0.129)

        self.Entry_gtp_y.configure(background="white")
        self.Entry_gtp_y.configure(font="TkFixedFont")
        self.Entry_gtp_y.configure(selectbackground="#c4c4c4")
        self.Entry_gtp_y.configure(textvariable=gui_support.gtp_y)

        self.Entry_gtp_z = Entry(self.MM_Frame)
        self.Entry_gtp_z.place(relx=0.311, rely=0.136, height=20, relwidth=0.129)

        self.Entry_gtp_z.configure(background="white")
        self.Entry_gtp_z.configure(font="TkFixedFont")
        self.Entry_gtp_z.configure(selectbackground="#c4c4c4")
        self.Entry_gtp_z.configure(textvariable=gui_support.gtp_z)

        self.Button_gtp = Button(self.MM_Frame, command=lambda:gtp())
        self.Button_gtp.place(relx=0.049, rely=0.211, height=26, width=149)
        self.Button_gtp.configure(activebackground="#d9d9d9")
        self.Button_gtp.configure(text='''Go To Position (um)''')

        self.Button_step_x = Button(self.MM_Frame, command=lambda:step_x())
        self.Button_step_x.place(relx=0.198, rely=0.508, height=26, width=32)
        self.Button_step_x.configure(activebackground="#d9d9d9")
        self.Button_step_x.configure(text='''x''')

        self.Label_step = Label(self.MM_Frame, anchor='w')
        self.Label_step.place(relx=0.049, rely=0.441, height=18, width=66)
        self.Label_step.configure(activebackground="#f9f9f9")
        self.Label_step.configure(text='''Step (um)''')

        self.Button_step_y = Button(self.MM_Frame, command=lambda: step_y())
        self.Button_step_y.place(relx=0.198, rely=0.61, height=26, width=32)
        self.Button_step_y.configure(activebackground="#d9d9d9")
        self.Button_step_y.configure(text='''y''')

        self.Button_step_z = Button(self.MM_Frame, command=lambda: step_z())
        self.Button_step_z.place(relx=0.198, rely=0.712, height=26, width=32)
        self.Button_step_z.configure(activebackground="#d9d9d9")
        self.Button_step_z.configure(text='''z''')

        #self.Button_setorigin = Button(self.MM_Frame, command = lambda: origin())
        #self.Button_setorigin.place(relx=0.049, rely=0.305, height=26, width=87)
        #self.Button_setorigin.configure(activebackground="#d9d9d9")
        #self.Button_setorigin.configure(text='''Set Origin''')

        self.Button_velocity = Button(self.MM_Frame, command = lambda: change_velocity())
        self.Button_velocity.place(relx=0.444, rely=0.475, height=26, width=118)
        self.Button_velocity.configure(activebackground="#d9d9d9")
        self.Button_velocity.configure(text='''Velocity (um/s)''')

        self.Entry_velocity = Entry(self.MM_Frame)
        self.Entry_velocity.place(relx=0.765, rely=0.475, height=20
                                  , relwidth=0.138)
        self.Entry_velocity.configure(background="white")
        self.Entry_velocity.configure(font="TkFixedFont")
        self.Entry_velocity.configure(selectbackground="#c4c4c4")
        self.Entry_velocity.configure(textvariable=gui_support.velocity)

        self.Spinbox_step_x = Spinbox(self.MM_Frame, from_=-50.0, to=50.0)
        self.Spinbox_step_x.place(relx=0.049, rely=0.508, relheight=0.068
                                  , relwidth=0.134)
        self.Spinbox_step_x.configure(activebackground="#f9f9f9")
        self.Spinbox_step_x.configure(background="white")
        self.Spinbox_step_x.configure(from_="-50.0")
        self.Spinbox_step_x.configure(highlightbackground="black")
        self.Spinbox_step_x.configure(selectbackground="#c4c4c4")
        self.Spinbox_step_x.configure(textvariable=gui_support.step_x)
        self.Spinbox_step_x.configure(to="50.0")

        self.Spinbox_step_z = Spinbox(self.MM_Frame, from_=-50.0, to=50.0)
        self.Spinbox_step_z.place(relx=0.049, rely=0.712, relheight=0.068
                                  , relwidth=0.134)
        self.Spinbox_step_z.configure(activebackground="#f9f9f9")
        self.Spinbox_step_z.configure(background="white")
        self.Spinbox_step_z.configure(from_="-50.0")
        self.Spinbox_step_z.configure(highlightbackground="black")
        self.Spinbox_step_z.configure(selectbackground="#c4c4c4")
        self.Spinbox_step_z.configure(textvariable=gui_support.step_z)
        self.Spinbox_step_z.configure(to="50.0")

        self.Spinbox_step_y = Spinbox(self.MM_Frame, from_=-50.0, to=50.0)
        self.Spinbox_step_y.place(relx=0.049, rely=0.61, relheight=0.068
                                  , relwidth=0.134)
        self.Spinbox_step_y.configure(activebackground="#f9f9f9")
        self.Spinbox_step_y.configure(background="white")
        self.Spinbox_step_y.configure(from_="-50.0")
        self.Spinbox_step_y.configure(highlightbackground="black")
        self.Spinbox_step_y.configure(selectbackground="#c4c4c4")
        self.Spinbox_step_y.configure(textvariable=gui_support.step_y)
        self.Spinbox_step_y.configure(to="50.0")

        self.Radiobutton_highres = Radiobutton(self.MM_Frame, command = lambda: change_resolution())
        self.Radiobutton_highres.place(relx=0.42, rely=0.576, relheight=0.068, relwidth=0.469)
        self.Radiobutton_highres.configure(activebackground="#d9d9d9")
        self.Radiobutton_highres.configure(justify=LEFT)
        self.Radiobutton_highres.configure(text='''High Resolution (0.4um/s)''')
        self.Radiobutton_highres.configure(value="low")
        self.Radiobutton_highres.configure(variable=gui_support.radio_resolution)

        self.Radiobutton_lowres = Radiobutton(self.MM_Frame, command = lambda: change_resolution())
        self.Radiobutton_lowres.place(relx=0.43, rely=0.644, relheight=0.068, relwidth=0.415)
        self.Radiobutton_lowres.configure(activebackground="#d9d9d9")
        self.Radiobutton_lowres.configure(justify=LEFT)
        self.Radiobutton_lowres.configure(text='''Low Resolution (2um/s)''')
        self.Radiobutton_lowres.configure(value="high")
        self.Radiobutton_lowres.configure(variable=gui_support.radio_resolution)

        self.Button_mm_interrupt = Button(self.MM_Frame, command = lambda: mm_interupt())
        self.Button_mm_interrupt.place(relx=0.642, rely=0.847, height=36
                                       , width=131)
        self.Button_mm_interrupt.configure(activebackground="#d80000")
        self.Button_mm_interrupt.configure(background="#d80000")
        self.Button_mm_interrupt.configure(font=font10)
        self.Button_mm_interrupt.configure(state=ACTIVE)
        self.Button_mm_interrupt.configure(text='''Interrupt''')
        self.Button_mm_interrupt.configure(width=131)

        self.Label_pathing = Label(self.MM_Frame, anchor='w')
        self.Label_pathing.place(relx=0.059, rely=0.9, height=18, width=110)
        self.Label_pathing.configure(activebackground="#f9f9f9")
        self.Label_pathing.configure(text='''Pathing Function''')

        self.Entry_pathing_func = Entry(self.MM_Frame)
        self.Entry_pathing_func.place(relx=0.168, rely=0.9, height=20
                                      , relwidth=0.336)
        self.Entry_pathing_func.configure(background="white")
        self.Entry_pathing_func.configure(font="TkFixedFont")
        self.Entry_pathing_func.configure(selectbackground="#c4c4c4")
        self.Entry_pathing_func.configure(textvariable=gui_support.pathing_func)

        #self.Radiobutton_absolute = Radiobutton(self.MM_Frame)
        #self.Radiobutton_absolute.place(relx=0.444, rely=0.136, relheight=0.068, relwidth=0.205)
        #self.Radiobutton_absolute.configure(activebackground="#d9d9d9")
        #self.Radiobutton_absolute.configure(justify='left')
        #self.Radiobutton_absolute.configure(text='''Absolute''')
        #self.Radiobutton_absolute.configure(value="absolute")
        #self.Radiobutton_absolute.configure(variable=gui_support.radio_pos_mode)

        #self.Radiobutton_relative = Radiobutton(self.MM_Frame)
        #self.Radiobutton_relative.place(relx=0.444, rely=0.203, relheight=0.068, relwidth=0.19)
        #self.Radiobutton_relative.configure(activebackground="#d9d9d9")
        #self.Radiobutton_relative.configure(justify='left')
        #self.Radiobutton_relative.configure(text='''Relative''')
        #self.Radiobutton_relative.configure(value="relative")
        #self.Radiobutton_relative.configure(variable=gui_support.radio_pos_mode)

        self.Current_Frame = Frame(top)
        self.Current_Frame.place(relx=0.0, rely=0.477, relheight=0.517
                                 , relwidth=0.534)
        self.Current_Frame.configure(relief=RAISED)
        self.Current_Frame.configure(borderwidth="2")
        self.Current_Frame.configure(relief=RAISED)
        self.Current_Frame.configure(width=405)

        self.Label_ps = Label(self.Current_Frame, anchor='w')
        self.Label_ps.place(relx=0.025, rely=0.031, height=23, width=190)
        self.Label_ps.configure(activebackground="#f9f9f9")
        self.Label_ps.configure(font=font9)
        self.Label_ps.configure(text='''Current/Power Supply''')

        self.Button_ps_interrupt = Button(self.Current_Frame, command = lambda: supply_interupt())
        self.Button_ps_interrupt.place(relx=0.642, rely=0.842, height=36
                                       , width=131)
        self.Button_ps_interrupt.configure(activebackground="#d80000")
        self.Button_ps_interrupt.configure(background="#d80000")
        self.Button_ps_interrupt.configure(font=font10)
        self.Button_ps_interrupt.configure(state=ACTIVE)
        self.Button_ps_interrupt.configure(text='''Interrupt''')
        self.Button_ps_interrupt.configure(width=131)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
        [('selected', _compcolor), ('active', _ana2color)])
        self.Notebook_ps = ttk.Notebook(self.Current_Frame)
        self.Notebook_ps.place(relx=0.025, rely=0.14, relheight=0.625
                               , relwidth=0.919)
        self.Notebook_ps.configure(width=372)
        self.Notebook_ps.configure(takefocus="")
        self.Notebook_ps_t0 = Frame(self.Notebook_ps)
        self.Notebook_ps.add(self.Notebook_ps_t0, padding=3)
        self.Notebook_ps.tab(0, text="Constant", compound="left", underline="-1"
                             , )
        self.Notebook_ps_t1 = Frame(self.Notebook_ps)
        self.Notebook_ps.add(self.Notebook_ps_t1, padding=3)
        self.Notebook_ps.tab(1, text="Square", compound="left", underline="-1", )
        self.Notebook_ps_t2 = Frame(self.Notebook_ps)
        self.Notebook_ps.add(self.Notebook_ps_t2, padding=3)
        self.Notebook_ps.tab(2, text="Sinusoidal", compound="left", underline="-1"
                             , )
        self.Notebook_ps_t3 = Frame(self.Notebook_ps)
        self.Notebook_ps.add(self.Notebook_ps_t3, padding=3)
        self.Notebook_ps.tab(3, text="Ramping", compound="none", underline="-1", )

        self.Label_constant_amps = Label(self.Notebook_ps_t0, anchor='w')
        self.Label_constant_amps.place(relx=0.027, rely=0.071, height=18
                                       , width=92)
        self.Label_constant_amps.configure(activebackground="#f9f9f9")
        self.Label_constant_amps.configure(text='''Amperes (A)''')

        self.Entry_constant_amps = Entry(self.Notebook_ps_t0)
        self.Entry_constant_amps.place(relx=0.297, rely=0.071, height=20
                                       , relwidth=0.178)
        self.Entry_constant_amps.configure(background="white")
        self.Entry_constant_amps.configure(font="TkFixedFont")
        self.Entry_constant_amps.configure(selectbackground="#c4c4c4")
        self.Entry_constant_amps.configure(textvariable=gui_support.constant_amps)

        self.Label_constant_duration = Label(self.Notebook_ps_t0, anchor='w')
        self.Label_constant_duration.place(relx=0.027, rely=0.214, height=18
                                           , width=79)
        self.Label_constant_duration.configure(activebackground="#f9f9f9")
        self.Label_constant_duration.configure(text='''Duration (s)''')

        self.Entry_constant_duration = Entry(self.Notebook_ps_t0)
        self.Entry_constant_duration.place(relx=0.297, rely=0.214, height=20
                                           , relwidth=0.178)
        self.Entry_constant_duration.configure(background="white")
        self.Entry_constant_duration.configure(font="TkFixedFont")
        self.Entry_constant_duration.configure(selectbackground="#c4c4c4")
        self.Entry_constant_duration.configure(textvariable=gui_support.constant_duration)

        self.Button_constant_run = Button(self.Notebook_ps_t0, command=lambda: constant_run())
        self.Button_constant_run.place(relx=0.027, rely=0.429, height=26
                                       , width=50)
        self.Button_constant_run.configure(activebackground="#d9d9d9")
        self.Button_constant_run.configure(text='''Run''')

        self.Label_square_amp = Label(self.Notebook_ps_t1, anchor='w')
        self.Label_square_amp.place(relx=0.027, rely=0.071, height=18, width=99)
        self.Label_square_amp.configure(activebackground="#f9f9f9")
        self.Label_square_amp.configure(text='''Amplitude (A)''')

        self.Entry_square_amp = Entry(self.Notebook_ps_t1)
        self.Entry_square_amp.place(relx=0.324, rely=0.071, height=20
                                    , relwidth=0.178)
        self.Entry_square_amp.configure(background="white")
        self.Entry_square_amp.configure(font="TkFixedFont")
        self.Entry_square_amp.configure(selectbackground="#c4c4c4")
        self.Entry_square_amp.configure(textvariable=gui_support.square_amp)

        self.Label_square_duration = Label(self.Notebook_ps_t1, anchor='w')
        self.Label_square_duration.place(relx=0.027, rely=0.214, height=18
                                         , width=79)
        self.Label_square_duration.configure(activebackground="#f9f9f9")
        self.Label_square_duration.configure(text='''Duration (s)''')

        self.Entry_square_duration = Entry(self.Notebook_ps_t1)
        self.Entry_square_duration.place(relx=0.324, rely=0.214, height=20
                                         , relwidth=0.178)
        self.Entry_square_duration.configure(background="white")
        self.Entry_square_duration.configure(font="TkFixedFont")
        self.Entry_square_duration.configure(selectbackground="#c4c4c4")
        self.Entry_square_duration.configure(textvariable=gui_support.square_duration)

        self.Label_square_duty = Label(self.Notebook_ps_t1, anchor='w')
        self.Label_square_duty.place(relx=0.027, rely=0.357, height=18, width=93)

        self.Label_square_duty.configure(activebackground="#f9f9f9")
        self.Label_square_duty.configure(text='''Duty Cycle (%)''')

        self.Entry_square_duty = Entry(self.Notebook_ps_t1)
        self.Entry_square_duty.place(relx=0.324, rely=0.357, height=20
                                     , relwidth=0.178)
        self.Entry_square_duty.configure(background="white")
        self.Entry_square_duty.configure(font="TkFixedFont")
        self.Entry_square_duty.configure(selectbackground="#c4c4c4")
        self.Entry_square_duty.configure(textvariable=gui_support.square_duty)

        self.Label_square_freq = Label(self.Notebook_ps_t1, anchor='w')
        self.Label_square_freq.place(relx=0.027, rely=0.5, height=18, width=97)
        self.Label_square_freq.configure(activebackground="#f9f9f9")
        self.Label_square_freq.configure(text='''Frequency (Hz)''')

        self.Entry_square_freq = Entry(self.Notebook_ps_t1)
        self.Entry_square_freq.place(relx=0.324, rely=0.5, height=20
                                     , relwidth=0.178)
        self.Entry_square_freq.configure(background="white")
        self.Entry_square_freq.configure(font="TkFixedFont")
        self.Entry_square_freq.configure(selectbackground="#c4c4c4")
        self.Entry_square_freq.configure(textvariable=gui_support.square_freq)

        self.Button_square_run = Button(self.Notebook_ps_t1, command=lambda: square_run())
        self.Button_square_run.place(relx=0.027, rely=0.714, height=26, width=50)

        self.Button_square_run.configure(activebackground="#d9d9d9")
        self.Button_square_run.configure(text='''Run''')

        self.Entry_sin_freq = Entry(self.Notebook_ps_t2)
        self.Entry_sin_freq.place(relx=0.324, rely=0.357, height=20
                                  , relwidth=0.178)
        self.Entry_sin_freq.configure(background="white")
        self.Entry_sin_freq.configure(font="TkFixedFont")
        self.Entry_sin_freq.configure(selectbackground="#c4c4c4")
        self.Entry_sin_freq.configure(textvariable=gui_support.sin_freq)

        self.Label_sin_freq = Label(self.Notebook_ps_t2, anchor='w')
        self.Label_sin_freq.place(relx=0.027, rely=0.357, height=18, width=97)
        self.Label_sin_freq.configure(activebackground="#f9f9f9")
        self.Label_sin_freq.configure(text='''Frequency (Hz)''')

        self.Label_sin_amp = Label(self.Notebook_ps_t2, anchor='w')
        self.Label_sin_amp.place(relx=0.027, rely=0.071, height=18, width=99)
        self.Label_sin_amp.configure(activebackground="#f9f9f9")
        self.Label_sin_amp.configure(text='''Amplitude (A)''')

        self.Entry_sin_amplitude = Entry(self.Notebook_ps_t2)
        self.Entry_sin_amplitude.place(relx=0.324, rely=0.071, height=20
                                       , relwidth=0.178)
        self.Entry_sin_amplitude.configure(background="white")
        self.Entry_sin_amplitude.configure(font="TkFixedFont")
        self.Entry_sin_amplitude.configure(selectbackground="#c4c4c4")
        self.Entry_sin_amplitude.configure(textvariable=gui_support.sin_amplitude)

        self.Label_sin_offset = Label(self.Notebook_ps_t2, anchor='w')
        self.Label_sin_offset.place(relx=0.027, rely=0.214, height=18, width=74)
        self.Label_sin_offset.configure(activebackground="#f9f9f9")
        self.Label_sin_offset.configure(text='''Offset (A)''')

        self.Entry_sin_offset = Entry(self.Notebook_ps_t2)
        self.Entry_sin_offset.place(relx=0.324, rely=0.214, height=20
                                    , relwidth=0.178)
        self.Entry_sin_offset.configure(background="white")
        self.Entry_sin_offset.configure(font="TkFixedFont")
        self.Entry_sin_offset.configure(selectbackground="#c4c4c4")
        self.Entry_sin_offset.configure(textvariable=gui_support.sin_offset)

        self.Label_sin_duration = Label(self.Notebook_ps_t2, anchor='w')
        self.Label_sin_duration.place(relx=0.027, rely=0.5, height=18, width=79)
        self.Label_sin_duration.configure(activebackground="#f9f9f9")
        self.Label_sin_duration.configure(text='''Duration (s)''')

        self.Entry_sin_duration = Entry(self.Notebook_ps_t2)
        self.Entry_sin_duration.place(relx=0.324, rely=0.5, height=20
                                      , relwidth=0.178)
        self.Entry_sin_duration.configure(background="white")
        self.Entry_sin_duration.configure(font="TkFixedFont")
        self.Entry_sin_duration.configure(selectbackground="#c4c4c4")
        self.Entry_sin_duration.configure(textvariable=gui_support.sin_duration)

        self.Button_sin_run = Button(self.Notebook_ps_t2, command=lambda: sinusoidal_run())
        self.Button_sin_run.place(relx=0.027, rely=0.714, height=26, width=50)
        self.Button_sin_run.configure(activebackground="#d9d9d9")
        self.Button_sin_run.configure(text='''Run''')

        self.Label_ramping_amp = Label(self.Notebook_ps_t3, anchor='w')
        self.Label_ramping_amp.place(relx=0.027, rely=0.071, height=18, width=99)

        self.Label_ramping_amp.configure(text='''Amplitude (A)''')

        self.Label_ramping_rise = Label(self.Notebook_ps_t3, anchor='w')
        self.Label_ramping_rise.place(relx=0.027, rely=0.214, height=18
                                      , width=84)
        self.Label_ramping_rise.configure(text='''Rise Time (s)''')

        self.Label_ramping_steady = Label(self.Notebook_ps_t3, anchor='w')
        self.Label_ramping_steady.place(relx=0.027, rely=0.357, height=18
                                        , width=101)
        self.Label_ramping_steady.configure(text='''Steady Time (s)''')

        self.Label_ramping_rest = Label(self.Notebook_ps_t3, anchor='w')
        self.Label_ramping_rest.place(relx=0.027, rely=0.5, height=18, width=86)
        self.Label_ramping_rest.configure(text='''Rest Time (s)''')

        self.Label_ramping_duration = Label(self.Notebook_ps_t3, anchor='w')
        self.Label_ramping_duration.place(relx=0.027, rely=0.643, height=18, width=86)
        self.Label_ramping_duration.configure(text='''Duration (s)''')

        self.Entry_ramping_amp = Entry(self.Notebook_ps_t3)
        self.Entry_ramping_amp.place(relx=0.324, rely=0.071, height=20
                                     , relwidth=0.178)
        self.Entry_ramping_amp.configure(background="white")
        self.Entry_ramping_amp.configure(font="TkFixedFont")
        self.Entry_ramping_amp.configure(textvariable=gui_support.ramping_amp)
        self.Entry_ramping_amp.configure(width=66)

        self.Entry_ramping_rise = Entry(self.Notebook_ps_t3)
        self.Entry_ramping_rise.place(relx=0.324, rely=0.214, height=20
                                      , relwidth=0.178)
        self.Entry_ramping_rise.configure(background="white")
        self.Entry_ramping_rise.configure(font="TkFixedFont")
        self.Entry_ramping_rise.configure(textvariable=gui_support.ramping_rise)
        self.Entry_ramping_rise.configure(width=66)

        self.Entry_ramping_steady = Entry(self.Notebook_ps_t3)
        self.Entry_ramping_steady.place(relx=0.324, rely=0.357, height=20
                                        , relwidth=0.178)
        self.Entry_ramping_steady.configure(background="white")
        self.Entry_ramping_steady.configure(font="TkFixedFont")
        self.Entry_ramping_steady.configure(textvariable=gui_support.ramping_steady)
        self.Entry_ramping_steady.configure(width=66)

        self.Entry_ramping_rest = Entry(self.Notebook_ps_t3)
        self.Entry_ramping_rest.place(relx=0.324, rely=0.5, height=20
                                      , relwidth=0.178)
        self.Entry_ramping_rest.configure(background="white")
        self.Entry_ramping_rest.configure(font="TkFixedFont")
        self.Entry_ramping_rest.configure(textvariable=gui_support.ramping_rest)
        self.Entry_ramping_rest.configure(width=66)

        self.Entry_ramping_duration = Entry(self.Notebook_ps_t3)
        self.Entry_ramping_duration.place(relx=0.324, rely=0.643, height=20
                                      , relwidth=0.178)
        self.Entry_ramping_duration.configure(background="white")
        self.Entry_ramping_duration.configure(font="TkFixedFont")
        self.Entry_ramping_duration.configure(textvariable=gui_support.ramping_duration)
        self.Entry_ramping_duration.configure(width=66)

        self.Button_ramping_run = Button(self.Notebook_ps_t3, command = lambda: ramping_run())
        self.Button_ramping_run.place(relx=0.027, rely=0.857, height=26
                                      , width=50)
        self.Button_ramping_run.configure(activebackground="#d9d9d9")
        self.Button_ramping_run.configure(text='''Run''')

        self.Button_stop = Button(self.Current_Frame, command=lambda: stop())
        self.Button_stop.place(relx=0.025, rely=0.850, height=26, width=170)
        self.Button_stop.configure(activebackground="#d9d9d9")
        self.Button_stop.configure(text='''Stop Power Supply Output''')

        self.Status_Frame = Frame(top)
        self.Status_Frame.place(relx=0.541, rely=0.0, relheight=0.735
                                , relwidth=0.455)
        self.Status_Frame.configure(relief=RAISED)
        self.Status_Frame.configure(borderwidth="2")
        self.Status_Frame.configure(relief=RAISED)
        self.Status_Frame.configure(width=345)

        self.Label_status = Label(self.Status_Frame, anchor='w')
        self.Label_status.place(relx=0.029, rely=0.019, height=23, width=60)
        self.Label_status.configure(activebackground="#f9f9f9")
        self.Label_status.configure(font=font9)
        self.Label_status.configure(text='''Status''')

        #self.Label_status_relpos = Label(self.Status_Frame, anchor='w')
        #self.Label_status_relpos.place(relx=0.058, rely=0.076, height=18, width=144)
        #self.Label_status_relpos.configure(activebackground="#f9f9f9")
        #self.Label_status_relpos.configure(text='''Relative Position (um):''')

        self.Label_status_abspos = Label(self.Status_Frame, anchor='w')
        self.Label_status_abspos.place(relx=0.058, rely=0.114, height=18
                                       , width=100)
        self.Label_status_abspos.configure(text='''Absolute Position (um):''')

        self.Label_status_abspos_v = Label(self.Status_Frame, anchor='w')
        self.Label_status_abspos_v.place(relx=0.4, rely=0.114, height=18
                                         , width=175)
        self.Label_status_abspos_v.configure(text='''Value''')
        self.Label_status_abspos_v.configure(textvariable=gui_support.status_abspos_v)

        self.Label_status_res = Label(self.Status_Frame, anchor='w')
        self.Label_status_res.place(relx=0.058, rely=0.19, height=18, width=74)
        self.Label_status_res.configure(activebackground="#f9f9f9")
        self.Label_status_res.configure(text='''Resolution:''')

        self.Label_status_vel = Label(self.Status_Frame, anchor='w')
        self.Label_status_vel.place(relx=0.058, rely=0.152, height=18, width=100)

        self.Label_status_vel.configure(activebackground="#f9f9f9")
        self.Label_status_vel.configure(text='''Velocity (um/s):''')

        self.Label_status_magfield = Label(self.Status_Frame, anchor='w')
        self.Label_status_magfield.place(relx=0.058, rely=0.229, height=18
                                         , width=98)
        self.Label_status_magfield.configure(activebackground="#f9f9f9")
        self.Label_status_magfield.configure(text='''Magnetic Field:''')

        self.Label_console = Label(self.Status_Frame, anchor='w')
        self.Label_console.place(relx=0.058, rely=0.59, height=18, width=101)
        self.Label_console.configure(activebackground="#f9f9f9")
        self.Label_console.configure(text='''Console Output''')

        #self.Label_status_relpos_v = Label(self.Status_Frame, anchor='w')
        #self.Label_status_relpos_v.place(relx=0.493, rely=0.076, height=18, width=160)
        #self.Label_status_relpos_v.configure(activebackground="#f9f9f9")
        #self.Label_status_relpos_v.configure(justify=LEFT)
        #self.Label_status_relpos_v.configure(text='''Value''')
        #self.Label_status_relpos_v.configure(textvariable=gui_support.status_relpos_v)
        #self.Label_status_relpos_v.configure(width=89)

        self.Label_status_vel_v = Label(self.Status_Frame, anchor='w')
        self.Label_status_vel_v.place(relx=0.377, rely=0.152, height=18
                                      , width=39)
        self.Label_status_vel_v.configure(activebackground="#f9f9f9")
        self.Label_status_vel_v.configure(justify=LEFT)
        self.Label_status_vel_v.configure(text='''Value''')
        self.Label_status_vel_v.configure(textvariable=gui_support.status_vel_v)

        self.Label_status_res_v = Label(self.Status_Frame, anchor='w')
        self.Label_status_res_v.place(relx=0.319, rely=0.19, height=18, width=90)

        self.Label_status_res_v.configure(activebackground="#f9f9f9")
        self.Label_status_res_v.configure(justify=LEFT)
        self.Label_status_res_v.configure(text='''Value''')
        self.Label_status_res_v.configure(textvariable=gui_support.status_res_v)

        self.Label_status_magfield_v = Label(self.Status_Frame, anchor='w')
        self.Label_status_magfield_v.place(relx=0.377, rely=0.229, height=18
                                           , width=39)
        self.Label_status_magfield_v.configure(activebackground="#f9f9f9")
        self.Label_status_magfield_v.configure(justify=LEFT)
        self.Label_status_magfield_v.configure(text='''Value''')
        self.Label_status_magfield_v.configure(textvariable=gui_support.status_magfield_v)

        self.Label_status_current = Label(self.Status_Frame)
        self.Label_status_current.place(relx=0.058, rely=0.307, height=18
                , width=77)
        self.Label_status_current.configure(anchor='w')
        self.Label_status_current.configure(text='''Current (A):''')

        self.Label_status_current_v = Label(self.Status_Frame)
        self.Label_status_current_v.place(relx=0.319, rely=0.307, height=18
                , width=97)
        self.Label_status_current_v.configure(anchor='w')
        self.Label_status_current_v.configure(text='''Value''')
        self.Label_status_current_v.configure(textvariable=gui_support.status_current_v)
        self.Label_status_current_v.configure(width=97)

        self.Label_status_wave = Label(self.Status_Frame)
        self.Label_status_wave.place(relx=0.058, rely=0.268, height=18, width=69)
        self.Label_status_wave.configure(anchor='w')
        self.Label_status_wave.configure(text='''Waveform:''')

        self.Label_status_wave_v = Label(self.Status_Frame)
        self.Label_status_wave_v.place(relx=0.329, rely=0.268, height=18, width=107)

        self.Label_status_wave_v.configure(anchor='w')
        self.Label_status_wave_v.configure(text='''Value''')
        self.Label_status_wave_v.configure(textvariable=gui_support.status_wave_v)
        self.Label_status_wave_v.configure(width=107)

        self.Label_status_duration = Label(self.Status_Frame)
        self.Label_status_duration.place(relx=0.058, rely=0.346, height=18
                , width=83)
        self.Label_status_duration.configure(anchor='w')
        self.Label_status_duration.configure(text='''Duration (s):''')

        self.Label_status_duration_v = Label(self.Status_Frame)
        self.Label_status_duration_v.place(relx=0.319, rely=0.346, height=18
                , width=37)
        self.Label_status_duration_v.configure(anchor='w')
        self.Label_status_duration_v.configure(text='''Label''')
        self.Label_status_duration_v.configure(textvariable=gui_support.status_duration_v)

        self.Button_status_refresh = Button(self.Status_Frame, command=lambda: status_refresh())
        self.Button_status_refresh.place(relx=0.754, rely=0.019, height=26
                                         , width=74)
        self.Button_status_refresh.configure(activebackground="#d9d9d9")
        self.Button_status_refresh.configure(text='''Refresh''')

        self.Button_master_stop = Button(self.Status_Frame, command = lambda: master_stop())
        self.Button_master_stop.place(relx=0.319, rely=0.895, height=41
                                      , width=122)
        self.Button_master_stop.configure(activebackground="#d80000")
        self.Button_master_stop.configure(activeforeground="white")
        self.Button_master_stop.configure(background="#d80000")
        self.Button_master_stop.configure(font=font11)
        self.Button_master_stop.configure(text='''STOP ALL''')
        self.Button_master_stop.configure(width=122)

        self.Button_clear_console = Button(self.Status_Frame, command = lambda: clear_console())
        self.Button_clear_console.place(relx=0.7, rely=0.562, height=26, width=95)
        self.Button_clear_console.configure(activebackground="#d9d9d9")
        self.Button_clear_console.configure(text='''Clear Console''')

        self.Button_print_console = Button(self.Status_Frame, command = lambda: write_log())
        self.Button_print_console.place(relx=0.475, rely=0.562, height=26, width=70)
        self.Button_print_console.configure(activebackground="#d9d9d9")
        self.Button_print_console.configure(text='''Write Log''')

        self.console_output = ScrolledText(self.Status_Frame)
        self.console_output.place(relx=0.029, rely=0.629, relheight=0.263
                                  , relwidth=0.951)
        self.console_output.configure(background="white")
        self.console_output.configure(font="TkTextFont")
        self.console_output.configure(insertborderwidth="3")
        self.console_output.configure(selectbackground="#c4c4c4")
        self.console_output.configure(width=10)
        self.console_output.configure(wrap=NONE)

        self.Frame_demag = Frame(top)
        self.Frame_demag.place(relx=0.541, rely=0.743, relheight=0.251
                               , relwidth=0.455)
        self.Frame_demag.configure(relief=RAISED)
        self.Frame_demag.configure(borderwidth="2")
        self.Frame_demag.configure(relief=RAISED)
        self.Frame_demag.configure(width=345)

        self.Button_demag = Button(self.Frame_demag, command=lambda: demagnetization())
        self.Button_demag.place(relx=0.145, rely=0.550, height=40, width=215)
        self.Button_demag.configure(activebackground="#d9d9d9")
        self.Button_demag.configure(text='''4. Start Demagnetization Process''')

        self.Button_calibrate = Button(self.Frame_demag, command=lambda: calibrate_demag())
        self.Button_calibrate.place(relx=0.300, rely=0.215, height=26, width=85)
        self.Button_calibrate.configure(activebackground="#d9d9d9")
        self.Button_calibrate.configure(text='''2. Calibrate''')

        self.Label_demag_isntr1 = Label(self.Frame_demag, anchor='w')
        self.Label_demag_isntr1.place(relx=0.05, rely=0.050, height=18
                                           , width=275)
        self.Label_demag_isntr1.configure(activebackground="#f9f9f9")
        self.Label_demag_isntr1.configure(justify=LEFT)
        self.Label_demag_isntr1.configure(text='''1. Hold Hall sensor away from any magnetic field''')

        self.Label_demag_isntr2 = Label(self.Frame_demag, anchor='w')
        self.Label_demag_isntr2.place(relx=0.05, rely=0.400, height=18
                                     , width=300)
        self.Label_demag_isntr2.configure(activebackground="#f9f9f9")
        self.Label_demag_isntr2.configure(justify=LEFT)
        self.Label_demag_isntr2.configure(text='''3. Hold Hall sensor directly on the tip of the solenoid''')

        self.Label_demag_isntr3 = Label(self.Frame_demag, anchor='w')
        self.Label_demag_isntr3.place(relx=0.015, rely=0.820, height=18
                                      , width=335)
        self.Label_demag_isntr3.configure(activebackground="#f9f9f9")
        self.Label_demag_isntr3.configure(justify=LEFT)
        self.Label_demag_isntr3.configure(text='''*Note that there is a 3 second delay after clicking each button''')

        '''DEFAULT VALUES'''
        if mm == None:
            for child in self.MM_Frame.winfo_children():
                child.configure(state = 'disable')

        self.Entry_gtp_x.insert(0, "x")
        self.Entry_gtp_y.insert(0, "y")
        self.Entry_gtp_z.insert(0, "z")
        self.Spinbox_step_x.insert(0, 0)
        self.Spinbox_step_y.insert(0, 0)
        self.Spinbox_step_z.insert(0, 0)
        gui_support.radio_pos_mode.set("relative")
        gui_support.radio_resolution.set("low")
        gui_support.ramping_rest.set("0.25")
        gui_support.ramping_rise.set("0.25")
        gui_support.ramping_steady.set("0.25")
        gui_support.ramping_amp.set("1")
        gui_support.ramping_duration.set("10")
        gui_support.sin_freq.set("10")
        gui_support.sin_offset.set("1")
        gui_support.sin_amplitude.set("0.5")
        gui_support.sin_duration.set("10")
        gui_support.square_duty.set("50")
        gui_support.square_freq.set("10")
        gui_support.square_duration.set("10")
        gui_support.square_amp.set("1")
        gui_support.constant_amps.set("1")
        gui_support.constant_duration.set("10")
        gui_support.velocity.set("1000")
        gui_support.status_relpos_v.set("0x 0y 0z")
        gui_support.status_abspos_v.set("0x 0y 0z")
        gui_support.status_magfield_v.set("0")
        gui_support.status_current_v.set("0")
        gui_support.status_duration_v.set("0")
        gui_support.status_res_v.set("Low")
        gui_support.status_vel_v.set("500")
        gui_support.status_wave_v.set("Constant")
        status_refresh()




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


if __name__ == '__main__':
    vp_start_gui()



